//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.05.20 at 09:01:50 AM CEST 
//


package org.opcfoundation.ua._2008._02.types;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FilterOperator.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="FilterOperator">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Equals_0"/>
 *     &lt;enumeration value="IsNull_1"/>
 *     &lt;enumeration value="GreaterThan_2"/>
 *     &lt;enumeration value="LessThan_3"/>
 *     &lt;enumeration value="GreaterThanOrEqual_4"/>
 *     &lt;enumeration value="LessThanOrEqual_5"/>
 *     &lt;enumeration value="Like_6"/>
 *     &lt;enumeration value="Not_7"/>
 *     &lt;enumeration value="Between_8"/>
 *     &lt;enumeration value="InList_9"/>
 *     &lt;enumeration value="And_10"/>
 *     &lt;enumeration value="Or_11"/>
 *     &lt;enumeration value="Cast_12"/>
 *     &lt;enumeration value="InView_13"/>
 *     &lt;enumeration value="OfType_14"/>
 *     &lt;enumeration value="RelatedTo_15"/>
 *     &lt;enumeration value="BitwiseAnd_16"/>
 *     &lt;enumeration value="BitwiseOr_17"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "FilterOperator")
@XmlEnum
public enum FilterOperator {

    @XmlEnumValue("Equals_0")
    EQUALS_0("Equals_0"),
    @XmlEnumValue("IsNull_1")
    IS_NULL_1("IsNull_1"),
    @XmlEnumValue("GreaterThan_2")
    GREATER_THAN_2("GreaterThan_2"),
    @XmlEnumValue("LessThan_3")
    LESS_THAN_3("LessThan_3"),
    @XmlEnumValue("GreaterThanOrEqual_4")
    GREATER_THAN_OR_EQUAL_4("GreaterThanOrEqual_4"),
    @XmlEnumValue("LessThanOrEqual_5")
    LESS_THAN_OR_EQUAL_5("LessThanOrEqual_5"),
    @XmlEnumValue("Like_6")
    LIKE_6("Like_6"),
    @XmlEnumValue("Not_7")
    NOT_7("Not_7"),
    @XmlEnumValue("Between_8")
    BETWEEN_8("Between_8"),
    @XmlEnumValue("InList_9")
    IN_LIST_9("InList_9"),
    @XmlEnumValue("And_10")
    AND_10("And_10"),
    @XmlEnumValue("Or_11")
    OR_11("Or_11"),
    @XmlEnumValue("Cast_12")
    CAST_12("Cast_12"),
    @XmlEnumValue("InView_13")
    IN_VIEW_13("InView_13"),
    @XmlEnumValue("OfType_14")
    OF_TYPE_14("OfType_14"),
    @XmlEnumValue("RelatedTo_15")
    RELATED_TO_15("RelatedTo_15"),
    @XmlEnumValue("BitwiseAnd_16")
    BITWISE_AND_16("BitwiseAnd_16"),
    @XmlEnumValue("BitwiseOr_17")
    BITWISE_OR_17("BitwiseOr_17");
    private final String value;

    FilterOperator(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static FilterOperator fromValue(String v) {
        for (FilterOperator c: FilterOperator.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
